---
import arrow from "../images/step-arrow.svg";
import rarrow from "../images/step-reverse-arrow.svg";
import host from "../images/host.svg";
import professional from "../images/professional.svg";
import { getCollection } from "astro:content";
const stepCollection = await getCollection("steps");
const steps = stepCollection.map((s) => s.data).slice(0, 5);
---

<section>
  <div class="container">
    <h3 class="subheading">How it works</h3>
    <div class="content">
      {
        steps.map((st, idx) => (
          <>
            {idx === 0 && (
              <div class="person" data-type="person-host">
                <img src={host.src} alt="" />
                <p>Alana Franci</p>
                <small>Event host</small>
              </div>
            )}
            <div data-type={idx % 2 === 0 ? "host" : "professional"}>
              <img src={st.icon.src} />
              <span>{st.text}</span>
            </div>

            {idx === 0 ? (
              <>
                <img
                  data-type="arrow"
                  src={idx % 2 === 0 ? arrow.src : rarrow.src}
                />
                <div class="person" data-type="person-professional">
                  <img src={professional.src} alt="" />
                  <p>Philip Arcand</p>
                  <small>Event professional</small>
                </div>
              </>
            ) : (
              <img
                data-type="arrow"
                src={idx % 2 === 0 ? arrow.src : rarrow.src}
              />
            )}
          </>
        ))
      }
    </div>
  </div>
</section>

<style>
  section {
    --_offset: 2rem;
    --_border-color: rgb(145, 65, 159);
    --_background-color: linear-gradient(160deg, #f4e5fb 7.72%, #ffefe8 92.8%);
    grid-column: lgutter / rgutter;
    display: grid;
    gap: 2rem;
  }

  .container {
    position: relative;
    display: grid;
    gap: 2rem;
    place-items: center;
    place-content: center;
    justify-self: center;
    padding: 1rem;
    border: 1px solid var(--_border-color);
    background-image: var(--_background-color);
  }

  .person {
    display: grid;
    grid-column: left / left-center;
    grid-template-areas:
      "avatar name"
      "avatar type";
    grid-template-columns: min-content 1fr;
    column-gap: 0.5rem;
    place-content: center;
  }

  .person > p {
    grid-area: name;
  }

  .person > small {
    grid-area: type;
  }

  .person > img {
    grid-area: avatar;
  }

  .person[data-type="person-professional"] {
    direction: rtl;
    grid-column: right-center / right;
    grid-row: 3;
  }

  .content {
    display: grid;
    grid-template-columns: [left] 1fr [left-center] 1fr [right-center] 1fr [right];
    grid-template-rows: 1fr;
    gap: 1rem;
  }

  .content > div:not(.person) {
    display: flex;
    align-items: center;
    gap: 1rem;
    max-width: fit-content;
    padding: 0.75rem;
    border-radius: 0.5rem;
  }

  [data-type="host"] {
    grid-column: left / right-center;
    border: 1px solid var(--host-primary);
    background-color: var(--host-secondary);
  }

  [data-type="professional"] {
    flex-direction: row-reverse;
    grid-column: left-center / right;
    justify-self: flex-end;
    border: 1px solid var(--provider-primary);
    background-color: var(--provider-secondary);
  }

  [data-type="arrow"] {
    grid-column: left / right;
    width: 75%;
    height: 2rem;
    justify-self: center;
  }

  [data-type="arrow"]:first-of-type {
    grid-row: 3;
  }

  [data-type="arrow"]:last-of-type {
    display: none;
  }

  @media screen and (min-width: 30rem) {
    section {
      grid-column: main;
    }
    .container {
      max-width: 40rem;
      padding: 3rem;
      border-radius: 2rem;
    }

    .container::before {
      --_offset: 2rem;
      content: " ";
      position: absolute;
      left: calc(-1 * var(--_offset));
      right: calc(-1 * var(--_offset));
      top: var(--_offset);
      bottom: var(--_offset);
      border: 1px solid transparent;
      background: linear-gradient(to bottom, #fffbff, #91419f) border-box;
      mask-composite: exclude;
      -webkit-mask: /*4*/
        linear-gradient(#fff 0 0) padding-box,
        linear-gradient(#fff 0 0);
      -webkit-mask-composite: xor;
      z-index: -1;
      border-radius: 2rem;
    }

    .container::after {
      content: " ";
      position: absolute;
      bottom: -2.5rem;
      height: 4rem;
      background-image: radial-gradient(#974ba455 23%, transparent 71%);
      left: -2rem;
      right: -2rem;
      z-index: -1;
      border-radius: 500rem;
      overflow: hidden;
    }
  }

  .subheading {
    align-self: center;
    font-family: var(--alt-font-family);
    font-weight: 900;
    font-size: clamp(1.75rem, 2.5dvw + 1rem, 2.5rem);
  }
</style>
